set nospell
set autoread        " automatically reads, helpful when VCS may have changed the file

set diffopt+=vertical

"iunmap <expr> <Esc> " Make sure escape always takes you out of neocomplettion mode

" XkbSwitch {
    let g:XkbSwitchEnabled = 1
    let g:XkbSwitchLib = '/usr/local/lib/libInputSourceSwitcher.dylib'
    let g:XkbSwitchSkipFt = [ 'nerdtree' ]
" }

" ShowMarks {
    let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    " Don't leave on by default, use :ShowMarksOn to enable
    let g:showmarks_enable = 0
    " For marks a-z
    highlight ShowMarksHLl gui=bold guibg=LightBlue guifg=Blue
    " For marks A-Z
    highlight ShowMarksHLu gui=bold guibg=LightRed guifg=DarkRed
    " For all other marks
    highlight ShowMarksHLo gui=bold guibg=LightYellow guifg=DarkYellow
    " For multiple marks on the same line.
    highlight ShowMarksHLm gui=bold guibg=LightGreen guifg=DarkGreen
" }

" NERDTree {
    autocmd VimEnter * NERDTree
    let NERDTreeShowBookmarks=1
    let NERDTreeShowLineNumbers = 1
    let NERDTreeShowHidden=1
    let NERDTreeWinSize = 45
    let NERDTreeMinimalUI = 1
    let NERDTreeDirArrows = 1
    let NERDTreeChDirMode=1
    let NERDTreeMouseMode=2
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.hg$', '^\.svn$', '\.bzr$']
    let g:nerdtree_tabs_open_on_gui_startup=1
    let g:nerdtree_tabs_open_on_new_tab=1
    let NERDTreeMouseMode=2
    let NERDTreeQuitOnOpen = 0
    "nnoremap <leader><k> <plug>NERDTreeTabsToggle<CR>
" }

" PIV {
    let g:DisableAutoPHPFolding = 1
    let g:PIVAutoClose = 0
" }

" elm-vim {
    au FileType elm nmap <leader>b <Plug>(elm-make)
    au FileType elm nmap <leader>m <Plug>(elm-make-main)
    au FileType elm nmap <leader>t <Plug>(elm-test)
    au FileType elm nmap <leader>r <Plug>(elm-repl)
    au FileType elm nmap <leader>e <Plug>(elm-error-detail)
    au FileType elm nmap <leader>d <Plug>(elm-show-docs)
    au FileType elm nmap <leader>w <Plug>(elm-browse-docs)

    :au BufWritePost *.elm :ElmMakeMain
    let g:elm_jump_to_error = 1
    let g:elm_make_output_file = "index.html"
    let g:elm_make_shw_warnings = 0
    let g:elm_browser_command = ""
    let g:elm_detailed_complete = 0

    au BufRead,BufNewFile *.elm set sw=2 ts=2 expandtab
" }


" vimux {
    let g:VimuxHeight = "30"

    " Run the current file with rspec
    map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>

    " Prompt for a command to run
    map <Leader>vp :VimuxPromptCommand<CR>

    " Run last command executed by VimuxRunCommand
    map <Leader>vl :VimuxRunLastCommand<CR>

    " Inspect runner pane
    map <Leader>vi :VimuxInspectRunner<CR>

    " Close vim tmux runner opened by VimuxRunCommand
    map <Leader>vq :VimuxCloseRunner<CR>

    " Interrupt any command running in the runner pane
    map <Leader>vx :VimuxInterruptRunner<CR>

    " Zoom the runner pane (use <bind-key> z to restore runner pane)
    map <Leader>vz :call VimuxZoomRunner()<CR>)"
" }
