set nospell
set autoread        " automatically reads, helpful when VCS may have changed the file

set diffopt+=vertical


"iunmap <expr> <Esc> " Make sure escape always takes you out of neocomplettion mode

if isdirectory(expand("~/.vim/bundle/vim-xkbswitch/"))
    let g:XkbSwitchEnabled = 0
    let g:XkbSwitchLib = '/usr/local/bin/libxkbswitch.dylib'
    let g:XkbSwitchSkipFt = [ 'nerdtree' ]
    let g:XkbSwitchNLayout = 'us'
    "let g:XkbSwitchIMappings = ['ru']
endif

if isdirectory(expand("~/.vim/bundle/ShowMarks/"))
    let showmarks_include = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    " Don't leave on by default, use :ShowMarksOn to enable
    let g:showmarks_enable = 0
    " For marks a-z
    highlight ShowMarksHLl gui=bold guibg=LightBlue guifg=Blue
    " For marks A-Z
    highlight ShowMarksHLu gui=bold guibg=LightRed guifg=DarkRed
    " For all other marks
    highlight ShowMarksHLo gui=bold guibg=LightYellow guifg=DarkYellow
    " For multiple marks on the same line.
    highlight ShowMarksHLm gui=bold guibg=LightGreen guifg=DarkGreen
endif


if isdirectory(expand("~/.vim/bundle/NERDTree/"))
" NERDTree {
    autocmd VimEnter * NERDTree
    let NERDTreeShowBookmarks=0
    let NERDTreeShowLineNumbers = 1
    let NERDTreeShowHidden=0
    let NERDTreeWinSize = 45
    let NERDTreeMinimalUI = 1
    let NERDTreeDirArrows = 1
    let NERDTreeChDirMode=1
    let NERDTreeMouseMode=2
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.hg$', '^\.svn$', '\.bzr$']
    let g:nerdtree_tabs_open_on_gui_startup=1
    let g:nerdtree_tabs_open_on_new_tab=1
    let NERDTreeMouseMode=2
    let NERDTreeQuitOnOpen = 0
    "nnoremap <leader><k> <plug>NERDTreeTabsToggle<CR>
" }
endif


if isdirectory(expand("~/.vim/bundle/PIV/"))
" PIV {
    let g:DisableAutoPHPFolding = 1
    let g:PIVAutoClose = 0
" }
endif


if isdirectory(expand("~/.vim/bundle/elm-vim/"))
" elm-vim {
    au FileType elm nmap <leader>b <Plug>(elm-make)
    au FileType elm nmap <leader>m <Plug>(elm-make-main)
    au FileType elm nmap <leader>t <Plug>(elm-test)
    au FileType elm nmap <leader>r <Plug>(elm-repl)
    au FileType elm nmap <leader>e <Plug>(elm-error-detail)
    au FileType elm nmap <leader>d <Plug>(elm-show-docs)
    au FileType elm nmap <leader>w <Plug>(elm-browse-docs)

    :au BufWritePost *.elm :ElmMakeMain
    let g:elm_jump_to_error = 1
    let g:elm_make_output_file = "index.html"
    let g:elm_make_shw_warnings = 0
    let g:elm_browser_command = ""
    let g:elm_detailed_complete = 0

    let g:elm_make_rootpath = "."
    let g:elm_make_filepath_prefix = "./"
    "set path+=./**5
    set suffixesadd=.elm
    au BufRead,BufNewFile *.elm set sw=2 ts=2 expandtab includeexpr=substitute(v:fname,'\\.','/','g')
" }
endif


if isdirectory(expand("~/.vim/bundle/vimux/"))
" vimux {
    let g:VimuxHeight = "30"

    " Run the current file with rspec
    map <Leader>rb :call VimuxRunCommand("clear; rspec " . bufname("%"))<CR>

    " Prompt for a command to run
    map <Leader>vp :VimuxPromptCommand<CR>

    " Run last command executed by VimuxRunCommand
    map <Leader>vl :VimuxRunLastCommand<CR>

    " Inspect runner pane
    map <Leader>vi :VimuxInspectRunner<CR>

    " Close vim tmux runner opened by VimuxRunCommand
    map <Leader>vq :VimuxCloseRunner<CR>

    " Interrupt any command running in the runner pane
    map <Leader>vx :VimuxInterruptRunner<CR>

    " Zoom the runner pane (use <bind-key> z to restore runner pane)
    map <Leader>vz :call VimuxZoomRunner()<CR>)"
" }
endif

if isdirectory(expand("~/.vim/bundle/vim-fugitive/"))
    nnoremap <silent> <leader>gs :Gstatus<CR>
    nnoremap <silent> <leader>gd :Gdiff<CR>
    nnoremap <silent> <leader>gdf :Git diff<CR>
    nnoremap <silent> <leader>gc :Gcommit<CR>
    nnoremap <silent> <leader>gb :Gblame<CR>
    nnoremap <silent> <leader>gl :Glog<CR>
    nnoremap <silent> <leader>glg :Git lg<CR>
    nnoremap <silent> <leader>gp :Git pull<CR>
    nnoremap <silent> <leader>gpu :Gpush<CR>
    nnoremap <silent> <leader>gpun :Git push -u<CR>
    nnoremap <silent> <leader>gr :Gread<CR>
    nnoremap <silent> <leader>gw :Gwrite<CR>
    nnoremap <silent> <leader>ge :Gedit<CR>
    " Mnemonic _i_nteractive
    nnoremap <silent> <leader>gi :Git add -p %<CR>
    nnoremap <silent> <leader>gg :SignifyToggle<CR>
endif

if isdirectory(expand("~/.vim/bundle/fugitive-gitlab.vim/"))
    let g:fugitive_gitlab_domains = ['https://gitlab.2gis.ru', 'https://gitlab.com']
endif

if isdirectory(expand("~/.vim/bundle/neocomplete.vim/"))
    "Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete#enable_ignore_case = 'ignorecase'
    let g:neocomplete#enable_auto_delimiter = 0
    " Set minimum syntax keyword length.
    let g:neocomplete#sources#syntax#min_keyword_length = 2
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    " Define dictionary.
    let g:neocomplete#sources#dictionary#dictionaries = {
        \ 'default' : '',
        \ 'vimshell' : $HOME.'/.vimshell_hist',
        \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

    " Define keyword.
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'

    " Plugin key-mappings.
    inoremap <expr><C-g>     neocomplete#undo_completion()
    inoremap <expr><C-l>     neocomplete#complete_common_string()

    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    "inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    "function! s:my_cr_function()
      "return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
      " For no inserting <CR> key.
      "return pumvisible() ? "\<C-y>" : "\<CR>"
    "endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
    " AutoComplPop like behavior.
    "let g:neocomplete#enable_auto_select = 1
    " Enable omni completion.
    autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
endif

if isdirectory(expand("~/.vim/bundle/vim-localvimrc/"))
    let g:localvimrc_ask = 1
    let g:localvimrc_persistent = 1
endif


if isdirectory(expand("~/.vim/bundle/vim-geeknote/"))
    let g:GeeknoteFormat="markdown"
endif

" { http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/
    set relativenumber

    function! NumberToggle()
      if(&relativenumber == 1)
        set number
      else
        set relativenumber
      endif
    endfunc

    nnoremap <C-n> :call NumberToggle()<cr>

    :au FocusLost * :set number
    :au FocusGained * :set relativenumber

    :au InsertEnter * :set number
    :au InsertLeave * :set relativenumber
" }


" { http://stackoverflow.com/questions/28384159/vim-how-to-remove-clear-views-created-by-mkview-from-inside-of-vim
" # Function to permanently delete views created by 'mkview'
    function! MyDeleteView()
        let path = fnamemodify(bufname('%'),':p')
        " vim's odd =~ escaping for /
        let path = substitute(path, '=', '==', 'g')
        if empty($HOME)
        else
            let path = substitute(path, '^'.$HOME, '\~', '')
        endif
        let path = substitute(path, '/', '=+', 'g') . '='
        " view directory
        let path = &viewdir.'/'.path
        call delete(path)
        echo "Deleted: ".path
    endfunction

    " # Command Delview (and it's abbreviation 'delview')
    command! Delview call MyDeleteView()
    " Lower-case user commands: http://vim.wikia.com/wiki/Replace_a_builtin_command_using_cabbrev
    cabbrev delview <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Delview' : 'delview')<CR>
" }

if isdirectory(expand("~/.vim/bundle/vim-dispatch/"))
    let g:go_dispatch_enabled = 1
endif

if isdirectory(expand("~/.vim/bundle/vim-go"))
    au FileType go nmap <leader>r <Plug>(go-run)
    au FileType go nmap <leader>b <Plug>(go-build)
    au FileType go nmap <leader>t <Plug>(go-test)
    au FileType go nmap <leader>c <Plug>(go-coverage)

    au FileType go nmap <Leader>ds <Plug>(go-def-split)
    au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
    au FileType go nmap <Leader>dt <Plug>(go-def-tab)

    au FileType go nmap <Leader>gd <Plug>(go-doc)
    au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

    au FileType go nmap <Leader>gb <Plug>(go-doc-browser)

    au FileType go nmap <Leader>s <Plug>(go-implements)

    au FileType go nmap <Leader>i <Plug>(go-info)

    au FileType go nmap <Leader>e <Plug>(go-rename)

    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_interfaces = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    let g:go_fmt_command = "goimports"

    let g:go_fmt_fail_silently = 1

    let g:go_fmt_autosave = 1

    let g:go_metalinter_autosave = 0
    let g:go_metalinter_enabled = [ 'golint', 'errcheck']
    let g:go_metalinter_autosave_enabled = ['vet', 'golint']
    let g:go_metalinter_deadline = "10s"

    let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
    let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go']  }

    let g:go_test_timeout= '10s'
endif

autocmd FileType crontab setlocal nowritebackup



"====[ Make the 81st column stand out ]====================
    "" EITHER the entire 81st column, full-screen...
    "highlight ColorColumn ctermbg=magenta
    "set colorcolumn=81
    " OR ELSE just the 81st column of wide lines...
    highlight ColorColumn ctermbg=magenta
    call matchadd('ColorColumn', '\%81v', 100)

"=====[ Highlight matches when jumping to next ]=============

    "" This rewires n and N to do the highlighing...
    "nnoremap <silent> n   n:call HLNext(0.3)<cr>
    "nnoremap <silent> N   N:call HLNext(0.3)<cr>

    "" OR ELSE briefly hide everything except the match...
    "function! HLNext (blinktime)
        "highlight BlackOnBlack ctermfg=black ctermbg=black
        "let [bufnum, lnum, col, off] = getpos('.')
        "let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
        "let hide_pat = '\%<'.lnum.'l.'
                "\ . '\|'
                "\ . '\%'.lnum.'l\%<'.col.'v.'
                "\ . '\|'
                "\ . '\%'.lnum.'l\%>'.(col+matchlen-1).'v.'
                "\ . '\|'
                "\ . '\%>'.lnum.'l.'
        "let ring = matchadd('BlackOnBlack', hide_pat, 101)
        "redraw
        "exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
        "call matchdelete(ring)
        "redraw
    "endfunction

"====[ Make tabs, trailing whitespace, and non-breaking spaces visible ]======

    exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
    set list

"====[ Swap v and CTRL-V, because Block mode is more useful that Visual mode "]======

    nnoremap    v   <c-v>
    nnoremap <c-v>     v

    vnoremap    v   <c-v>
    vnoremap <c-v>     v

"====[ Always turn on syntax highlighting for diffs ]=========================

    " EITHER select by the file-suffix directly...
    augroup PatchDiffHighlight
        autocmd!
        autocmd BufEnter  *.patch,*.rej,*.diff   syntax enable
    augroup END

    " OR ELSE use the filetype mechanism to select automatically...
    filetype on
    augroup PatchDiffHighlight
        autocmd!
        autocmd FileType  diff   syntax enable
    augroup END

"====[ Make CTRL-K list diagraphs before each digraph entry ]===============

    inoremap <expr> <C-K> ShowDigraphs()

    function! ShowDigraphs ()
        digraphs
        call getchar()
        return "\<C-K>"
    endfunction

    " But also consider the hudigraphs.vim and betterdigraphs.vim plugins,
    " which offer smarter and less intrusive alternatives

if isdirectory(expand("~/.vim/bundle/Damian-Conway-s-Vim-Setup/"))
    vmap <expr>  ++  VMATH_YankAndAnalyse()
    nmap         ++  vip++
endif

if isdirectory(expand("~/.vim/bundle/Damian-Conway-s-Vim-Setup/"))
    let g:DVB_TrimWS = 1
    vmap  <expr>  <S-LEFT>        DVB_Drag('left')                         ##
    vmap  <expr>  <S-RIGHT>        DVB_Drag('right')                        ##
    vmap  <expr>  <S-DOWN>       DVB_Drag('down')                         ##
    vmap  <expr>  <S-UP>       DVB_Drag('up')                           ##

    vmap <expr> D DVB_Duplicate()
endif
